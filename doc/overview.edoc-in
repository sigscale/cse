@copyright 2021-2022 SigScale Global Inc.
@version %VERSION%
@title %DESCRIPTION%

@reference <a target="_blank"
		href="https://www.itu.int/rec/T-REC-I.312-199210-I">Q.1201</a>
		Principles of Intelligent Network Architecture
@reference <a target="_blank"
		href="https://www.itu.int/rec/T-REC-Q.1204-199303-I">Q.1204</a>
		Intelligent Network Distributed Functional Plane Architecture
@reference <a target="_blank"
		href="https://www.etsi.org/deliver/etsi_i_ets/300300_300399/30037401/01_60/ets_30037401e01p.pdf">
		ETS 300 374-1</a> Intelligent Network Application Protocol (INAP);
		Capability Set 1 (CS1)
@reference <a target="_blank"
		href="https://www.etsi.org/deliver/etsi_en/301100_301199/30114001/01.03.04_60/en_30114001v010304p.pdf">
		ETSI EN 301 140-1</a> Intelligent Network Application Protocol (INAP);
		Capability Set 2 (CS2)
@reference <a target="_blank"
		href="https://webapp.etsi.org/key/key.asp?GSMSpecPart1=29&amp;GSMSpecPart2=078">
		3GPP TS 29.078</a> Customised Applications for Mobile network Enhanced Logic (CAMEL)
		Application Part (CAP)

@doc This application implements a Custom Service Environment (CSE).

==Introduction==
This application provides a Service Logic Execution Environment (SLEE) for
Service Logic Processing Programs (SLP) implementing an operator's custom
services.  It is a highly concurrent SLEE, with low resource requirements,
supporting instantaneous SLP instantiation. Several protocol stacks are
supported including CAP, INAP, DIAMETER, RADIUS and REST.

SigScale CSE performs the Service Control Function (SCF) in an
Intelligent Network (IN), providing a platform to support a network
operator's customized service logic. The 3GPP CAMEL Application Part (CAP)
protocol is supported, providing a CAMEL Service Environment (CSE),
as well as ETSI INAP for wireline operators. 

===IN Service Processing Model===
The IN arose from an inability of network operators to rapidly create
and deploy new supplementary services. The IN addresses this through
reusable, modularized, network functions and standardized communication
between network functions via service independent interfaces.

A high level overview of an IN service processing model is given
in ITU-T Q.1201 Figure 16 as depicted below:

<img class="diagram" alt="IN Processing Model"
		src="in-processing-model.svg" />

Basic Call Processing (BCP) is provided in network functions such as
Mobile Switching Centers (MSC). The "hooks" are introduced into
individual BCPs to communicate with centralized service logic. During
an interaction session the BCP may be suspended.

The IN service logic is able, via the "hooks"functionality, to
interact with the BCP. In this way IN service logic can control the
sub-processes in the basic call process and the sequencing of these
sub-processes.  Thus, by changing centralized service logic, a new
service that uses existing network capabilities can readily be
implemented.

===IN Functional Architecture===
The main elements in the high level IN functional architecture
are depicted in the diagram below:

<img class="diagram" alt="IN Functional Architecture"
		src="in-functional-architecture.svg" />

This application implements the Service Control Function (SCF)
which provides the service logic programs (SLPs) that are used to
deliver IN services.

The Service Switching Function (SSF) is colocated with Mobile
Switching Center (MSC), Serving GPRS Support Node (SGSN) and
wireline circuit switches.

An optional Service Resource Function (SRF) provides capabilities
to interact with the subscriber by playing or detecting tones,
including DTMF, as well as playing or recording voice. An SRF may
be embedded in a Service Switching Point (SSP) or provided by an
external Intelligent Peripheral (IP). The bearer channels of an
IP are established with a Service Switching Point (SSP) using
telephony signaling (i.e. ISUP).

==Service Logic Processing Programs (SLP)==
The SLP instances (SLPI) are implemented as finte state machines
with the {@link //stdlib/gen_statem. gen_statem} behaviour.

The CAMEL standardized Originating Basic Call State Machine (O-BCSM)
is depicted in <a href="#figure1-1">Figure 1-1</a>.

<p><img class="diagram" alt="diagram of camel o-bcsm"
		name="figure1-1" src="o-bcsm-camel.svg" /><br />
Figure 1-1: O-BCSM</p>

The CAMEL standardized Terminating Basic Call State Machine (T-BCSM)
is depicted in <a href="#figure1-2">Figure 1-2</a>.

<p><img class="diagram" alt="diagram of camel t-bcsm"
		name="figure1-2" src="t-bcsm-camel.svg" /><br />
Figure 1-2: T-BCSM</p>

==Messaging==
Iinterprocess communication is depicted in
<a href="#figure1-2">Figure 1-2</a>. An SLPI process sends primitive
requests to Dialogue Handler (DHA) and Component Coordinator (CCO)
processes of the {@link //tcap. tcap} application's Component Sublayer
(CSL).  It receives primitive indications from DHA.

The Application Server Processes (ASP) of the {@link //m3ua. m3ua}
application exchange primitives with a Transaction Coordinator (TCO)
process in the {@link //tcap. tcap} application's Transaction Sublayer
(TSL).

<p><img id="messaging" class="diagram"
		alt="diagram of interprocess communication"
		name="figure1-2" src="messaging.svg" /><br />
Figure 1-2: Messaging</p>

==Distribution==
Process instances of the applications may be distributed across nodes
as depicted in <a href="#figure1-3">Figure 1-3</a>.

<p><img class="diagram" alt="diagram of process distribution"
		name="figure1-3" src="distribution.svg" /><br />
Figure 1-3: Distribution</p>

==Installation==
Before running the {@link //cse. cse} application for the first time
it is necessary to initialize {@link //mnesia. mnesia} tables.

===Initialize CSE===
```
otp@cse:~$ ERL_LIBS=lib erl -sname cse -config releases/%VERSION%/sys
(cse@cse)1> cse_app:install().
'''

===Initialize M3UA===
For IN use cases the SIGTRAN stack tables should be initialized:
```
(cse@cse)2> m3ua_app:install().
'''

===Initialize GTT===
Configure a {@link //gtt. gtt} application server (AS) and SCTP endpoint (EP):
```
(cse@cse)3> gtt_app:install().
(cse@cse)4> gtt:add_as(sg1, sg, 0, 0, [{2057, [], []}], loadshare, 1, 2).
(cse@cse)5> gtt:add_ep(ep1, {{0,0,0,0}, 2905, [{ppi,false},{use_rc,false}]}, undefined, server, sgp, gtt_m3ua_cb, [{ssn, #{146 => cse_tsl}}], [sg1]).
(cse@cse)6> q().
'''

==Operation==
The CSE application will start any number of configured TCAP or DIAMETER
services.  The {@link //inets. inets} application may be started to
support REST APIs.

===REST API===
The {@link //cse. cse} application provides a
<a target="_blank" href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">RESTful</a>
API built on the <a target="_blank" href="http://tools.ietf.org/html/rfc2616">HTTP</a> protocol
and using <a target="_blank" href="http://tools.ietf.org/html/rfc4627">JSON</a> data encoding.

The following <a target="_blank" href="https://www.tmforum.org/open-apis/">
TM Forum Open APIs</a> are used:
<p><table id="mt">
	<thead>
		<tr id="mt">
			<th id="mt">Number</th>
			<th id="mt">TM Forum Open API</th>
			<th id="mt">Download</th>
			<th id="mt">Browse</th>
		</tr>
	</thead>
	<tbody>
		<tr id="mt">
			<td id="mt">TMF634</td>
			<td id="mt">Resource Catalog Management</td>
			<td id="mt">
				<a href="/schema/resourceCatalogManagement.swagger.json"
						download="resourceCatalogManagement.json">
					<img src="oas-logo.svg" />
				</a>
			</td>
			<td id="mt">
				<a target="_blank"
						href="https://app.swaggerhub.com/apis/SigScale/cse-resource-catalog/4.0.0">
					<img src="swaggerhub-logo.svg" />
				</a>
			</td>
		</tr>
		<tr id="mt">
			<td id="mt">TMF639</td>
			<td id="mt">Resource Inventory Management</td>
			<td id="mt">
				<a href="/schema/resourceInventoryManagement.swagger.json"
						download="resourceInventoryManagement.json">
					<img src="oas-logo.svg" />
				</a>
			</td>
			<td id="mt">
				<a target="_blank"
						href="https://app.swaggerhub.com/apis/SigScale/cse-resource-inventory/4.0.0">
					<img src="swaggerhub-logo.svg" />
				</a>
			</td>
		</tr>
	</tbody>
</table></p>

===HTTP Methods===
The <a target="_blank" href="http://tools.ietf.org/html/rfc2616">HTTP</a>
methods used in this API include
<a target="_blank" href="http://tools.ietf.org/html/rfc2616#section-9.3">`GET'</a>,
<a target="_blank" href="http://tools.ietf.org/html/rfc2616#section-9.5">`POST'</a>,
<a target="_blank" href="http://tools.ietf.org/html/rfc2616#section-9.7">`DELETE'</a>.

===Query Patterns===
The Resource Inventory is indexed by the `id' attribute, making direct
selection using the path pattern `/resource/{id}' very efficient. Where
unavailable a query component
(<a target="_blank" href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.4">RFC3986</a>)
may be added to the path to select resource(s).

====Simple Query====
The `name' and `resourceSpecification' attributes are supported in a query
component using the simple syntax described in
<a target="_blank" href="https://www.tmforum.org/resources/specification/tmf630-rest-api-design-guidelines-4-2-0/">
TMF630</a> Part 1. The following example may be used to select all the rows
of `Prefix' tables by querying for the `resourceSpecification' value of a
`Prefix' table row:
```
curl -su admin:admin \
      http://localhost:8080/resourceInventoryManagement/v4/resource?resourceSpecification.id=1647577957914-66
'''

====Advanced Query Filter====
The `resourceCharacteristic' and `resourceRelationship' attribute values
are arrays of objects which cannot be selected using a simple query but
are supported using an advanced query pattern described in
<a target="_blank" href="https://www.tmforum.org/resources/specification/tmf630-rest-api-design-guidelines-4-2-0/">
TMF630</a> Part 6. A `filter' parameter value is a
<a target="_blank" href="https://www.ietf.org/archive/id/draft-ietf-jsonpath-base-05.html">
JSONPath</a> expression selecting members of these arrays. Simple and
advanced filters may be combined.

Selecting a specific row in a table requires a query on the characteristics
which define the columns. The following is a JSONPath expression example
selecting a row in a `Range' table:
```
resourceCharacteristic[?(@.name=='start' && @.value=='0010000'}]
'''

The following example demonstrates querying for a row in a table,
with a locally created `resourceSpecification', using the above filter.
Note that the special characters in the JSONPath expression must be escaped:
```
curl -su admin:admin \
      http://localhost:8080/resourceInventoryManagement/v4/resource?resourceSpecification.id=1665845853451-392&filter=resourceCharacteristic%5B%3F(%40.name%3D%3D%27start%27%26%26%40.value%3D%3D%2730010000%27)%5D
'''

====Delete by Query====
To save a step you may use an advanced query to delete a table row. Use the
above path with a DELETE operation and the REST server will first locate
the resource using the query and then continue with the DELETE operation
using the discovered `{id}'.

===Pagination===
A `GET' operation on a REST <i>Collection</i>, with or without a query
portion, could result in a huge array of <i>Items</i>. To prevent
overwhelming the client or server pagination is used. A maximum limit
on the number of items in a single response (page) is enforced (default
`1000'). The `Content-Range' header 
(<a target="_blank" href="https://www.rfc-editor.org/rfc/rfc7233">RFC7233</a>)
shall indicate the range of the response and the total size (if available):
```
Content-Range: items 1-1000/3768
Accept-Ranges: items
Etag: 1643855624410-7330
'''
The `Etag' header provides a reference to a process in the server which
holds a result buffer and continuation pointer. This process will be
removed after an idle timeout (default `1m'). A series of paginated `GET'
requests MUST include an `If-Match' header, containing the `Etag' value
of the first response, and specify the next page with the `Range' header:
```
If-Match: 1643855624410-7330
Range: items=1001-2000
'''
See `rest_page_size' and `rest_page_timeout' in the Configuration section
below.

==Configuration==
The {@link //cse. cse} application may be configured using the following
application environment variables (`~/releases/<VERSION>/sys.config').

===DIAMETER===
Application environment variables configuring instances of the
{@link //diameter. diameter} application:
<dl>
	<dt>`diameter'</dt>
		<dd>Defines DIAMETER services as `[{Addr, Port, Options}]'.
				Each set of local bind address (`Addr :: inet:ip_address()'),
				port (`Port :: 0..65535') and options
				(`Options :: [diameter:service_opt()]') define a
				DIAMETER service. (default: `[]')</dd>
</dl>

===TCAP===
Application environment variables configuring binding of the
Transaction Sublayer (TSL) of the {@link //tcap. tcap} application:
<dl>
	<dt>`tsl_name'</dt>
		<dd>Registered name of the TCO process in the TCAP Transaction
				Sublayer (TSL). (default: `cse_tsl')</dd>
	<dt>`tsl_callback'</dt>
		<dd>Name of the {@link //tcap/tcap_tco_server. `tcap_tco_server'}
				behaviour callback module implementing the TCAP binding.
				To enable the TCAP stack with the default module use
				`cse_tco_server_cb'.
				(default:` undefined'})</dd>
	<dt>`tsl_opts'</dt>
		<dd>Options in {@link //tcap/tcap:start_tsl/4. `tcap:start_tsl/'4}.
				(default: `[]')</dd>
	<dt>`tsl_args'</dt>
		<dd>Extra arguments in {@link //tcap/tcap:start_tsl/4. `tcap:start_tsl/4'}.
				The default value (`[{ac, ApplicationContexts}]') binds the
				CAP Phase 2,3,4 application contexts to module `cse_slp_cap_fsm'
				and INAP CS2 to `cse_slp_inap_fsm'.</dd>
</dl>

===Nrf_Rating===
Application environment variables configuring HTTP client
({@link //inets/httpc. httpc}) behaviour for the
<a target="_blank"
href="https://app.swaggerhub.com/apis/SigScale/nrf-rating/1.0.0">Nrf_Rating</a>
API on the 3GPP Re interface to a remote Rating Funtion (RF) (i.e. OCS).
<dl>
	<dt>`nrf_profile'</dt>
		<dd>Provides the {@link //inets/httpc:profile(). profile}
				name of a manager process for the {@link //inets/httpc. httpc}
				client. (default: `nrf')</dd>
	<dt>`nrf_uri'</dt>
		<dd>Uniform Resource Identifier (URI) for a
				<a href="https://app.swaggerhub.com/apis/SigScale/nrf-rating/1.0.0">Nrf_Rating</a>
				server (i.e. OCS).</dd>
	<dt>`nrf_options'</dt>
		<dd>HTTP {@link //inets/httpc:http_options(). options} used by the
				{@link //inets/httpc. httpc} client
				(default: `[{keep_alive_timeout, 4000}]').</dd>
	<dt>`nrf_headers'</dt>
		<dd>HTTP {@link //inets/httpc:headers(). headers} added by the
				{@link //inets/httpc. httpc} client (default: `[]').</dd>
</dl>

===REST===
Application environment variables configuring REST API behaviour:
<dl>
	<dt>`rest_page_size'</dt>
		<dd>Defines the maximum number of items to return in a single
				response to GET of a collection.</dd>
	<dt>`rest_page_timeout'</dt>
		<dd>Defines the idle timeout for a pagination server, after which
				it's Etag is no longer valid. (default: `60000')</dd>
</dl>

===SNMP===
Application environment variables configuring the SNMP
{@link //snmp/snmpa. agent} behaviour:
<dl>
	<dt>`snmp_alarms'</dt>
		<dd>Defines SNMP notifications ("traps"). The value format is
				`[{Notification, Options}]' where `Notification' is the
				Object Identifier (OID) name (`atom()') of a supported alarm
				and `Options' shall include `notify_name' defining a management
				target in the `snmpNotifyTable' (SNMP-NOTIFICATION-MIB)
				(e.g. `[{dbpPeerConnectionDownNotif, [{notify_name, "nms"}]},
				{dbpPeerConnectionUpNotif, [{notify_name, "nms"}]}]').
				(default: `[]')</dd>
</dl>

===Logging===
Application environment variables configuring SLP logs.
<dl>
	<dt>`log_dir'</dt>
		<dd>The base path to use for filename of logs. (default: `"log/slp"')</dd>
	<dt>`logs'</dt>
		<dd>Defines log handlers as `[{LogName, Options}]'
				(see {@link //cse/cse_log:open/2. cse_log:open/2}). (default: `[]')</dd>
</dl>

===Example sys.config===
```
[{cse,
     [{nrf_uri, "http://ocs.mnc001.mcc001.3gppnetwork.org/nrf-rating/v1"},
     {logs,
           [{'3gpp_ro',
                 [{format, external},
                 {type, wrap},
                 {size, {10485760, 10}}]},
           {nrf_rating,
                 [{format, external},
                 {type, wrap},
                 {size, {10485760, 10}}]},
           {prepaid,
                 [{format, external},
                 {type, wrap},
                 {size, {10485760, 10}}]}]},
     {diameter,
           [{{0,0,0,0}, 3868,
                 [{'Auth-Application-Id', [4]},
                 {'Supported-Vendor-Id',[193]},
                 {application,[{alias, cse_diameter_3gpp_ro_application},
                       {dictionary, diameter_gen_3gpp_ro_application},
                       {module, cse_diameter_3gpp_ro_application_cb},
                       {request_errors, callback}]},
                 {'Origin-Realm',"ims.mnc001.mnc001.3gppnetwork.org"}]}]}]},
{m3ua,
      []},
{gtt,
      []},
{mnesia,
      [{dir, "db"}]},
{inets,
      [{services,
         [{httpd,
            [{server_name, "cse"},
            {directory, {"/",
                  [{auth_type, mnesia},
                  {auth_name, "cse.sigscale.org"},
                  {require_group, ["staff"]}]}},
            {transfer_disk_log, "log/http/transfer"},
            {security_disk_log, "log/http/security"},
            {error_disk_log, "log/http/error"},
            {transfer_disk_log_size, {10485760, 10}},
            {security_disk_log_size, {10485760, 10}},
            {error_disk_log_size, {10485760, 10}},
            {disk_log_format, external},
            {modules,
                  [mod_alias,
                  mod_auth,
                  mod_responsecontrol,
                  mod_cse_rest_accepted_content,
                  mod_cse_rest_get,
                  mod_get,
                  mod_disk_log,
                  mod_cse_rest_post,
                  mod_cse_rest_delete,
                  mod_cse_rest_patch,
                  mod_disk_log]},
            {port, 8080},
            {socket_type, {essl,
                  [{certfile,  "ssl/certs/cse.pem"},
                  {keyfile, "ssl/private/cse.pem"}]}},
            {server_root, "/home/cse"},
            {alias, {"/doc", "lib/cse-%VERSION%/doc"}},
            {document_root, "lib/cse-%VERSION%/priv/www"}]}]}]},
{snmp,
      [{agent,
           [{config, [{dir, "snmp/conf"}]},
           {db_dir, "snmp/db"}]}]}].
'''

